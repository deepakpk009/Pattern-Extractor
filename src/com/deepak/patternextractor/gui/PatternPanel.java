/*
This file is part of PatternExtractor v0.3

PatternExtractor is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

PatternExtractor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with PatternExtractor.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * PatternPanel.java
 *
 * Created on Jan 1, 2006, 12:11:36 AM
 */
package com.deepak.patternextractor.gui;

import com.deepak.patternextractor.core.Tile;
import java.awt.Graphics;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

/**
 *
 * @author deepak
 */

/*
 * PatternPanel.java
 *
 * this class provides the pattern view based on the tile
 */
public class PatternPanel extends javax.swing.JPanel implements PropertyChangeListener {

    // tile reffernce
    private Tile tile = null;

    /** Creates new form PatternPanel */
    public PatternPanel() {
        initComponents();
    }

    /*
     * setter method to set the tile refference
     */
    public void setTile(Tile tile) {
        // set current tile reffernce
        this.tile = tile;
        // add current class(PatternPanel) as tile property change listner
        this.tile.addPropertyChangeListener(this);
        // repaint the panel component
        this.repaint();
    }

    /*
     * getter method to get the current tile refference
     */
    public Tile getTile() {
        return tile;
    }

    /*
     * overidden paint method of the jpanel
     */
    @Override
    public void paint(Graphics g) {
        // paint the base component
        super.paint(g);
        // if tile present then
        if (tile != null) {
            // generate the pattern from the tile
            for (int j = 0; j <= this.getHeight(); j += tile.getHeight()) {
                for (int i = 0; i <= this.getWidth(); i += tile.getWidth()) {
                    // draw the tile image onto the whole panel
                    g.drawImage(tile.getTileImage(), i, j, this);
                }
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /*
     * propertyChange method implemented asper PropertyChangeListener interface
     */
    public void propertyChange(PropertyChangeEvent evt) {
        // repaint the pattern panel component
        this.repaint();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
