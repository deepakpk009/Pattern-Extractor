/*
 This file is part of PatternExtractor v0.3

 PatternExtractor is free software: you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 PatternExtractor is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with PatternExtractor.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * MainWindow.java
 *
 * Created on Jan 1, 2006, 12:23:33 AM
 */
package com.deepak.patternextractor.gui;

import com.deepak.patternextractor.core.ImageFileFilter;
import com.deepak.patternextractor.core.ImageResize;
import com.deepak.patternextractor.core.PatternCreator;
import com.deepak.patternextractor.core.Tile;
import java.awt.Color;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.dnd.DropTargetListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.text.DefaultFormatter;

/**
 *
 * @author deepak
 */

/*
 * MainWindow.java
 *
 * this is the main window class
 */
public class MainWindow extends javax.swing.JFrame implements DropTargetListener {

    // source image which will be loaded onto the image viewer panel
    private BufferedImage sourceImage = null;
    // pattern viewer window object
    private PatternViewerWindow patternViewerWindow = null;
    // tile object
    private Tile tile = null;
    // tile save file object
    private File tileSaveFile = null;
    // pattern save file objec
    private File patternSaveFile = null;
    // source image file objec
    private File sourceImageFile = null;
    /**
     * the drop target object
     */
    private DropTarget dropTarget = null;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        // initialising main window components
        initComponents();
        // prevent user character input to all spinners
        ((DefaultFormatter) ((JSpinner.DefaultEditor) tileWidthSpinner.getEditor()).getTextField().getFormatter()).setAllowsInvalid(false);
        ((DefaultFormatter) ((JSpinner.DefaultEditor) tileHeightSpinner.getEditor()).getTextField().getFormatter()).setAllowsInvalid(false);
        ((DefaultFormatter) ((JSpinner.DefaultEditor) imageZoomSpinner.getEditor()).getTextField().getFormatter()).setAllowsInvalid(false);
        // initialising tile object
        tile = new Tile();
        // setting the default tile width
        tile.setWidth(Integer.parseInt(tileWidthSpinner.getValue().toString()));
        // setting the default tile height
        tile.setHeight(Integer.parseInt(tileHeightSpinner.getValue().toString()));
        // setting the default tile border color
        tile.setBorderColor(Color.RED);
        // setting the tile border color selection button background color
        tileBorderColorSelectionButton.setBackground(tile.getBorderColor());
        // setting the image viewer tile with the current tile
        imageViewer.setTile(tile);
        // setting the tile viewer tile with the current tile
        tileViewer.setTile(tile);
        // initialising the pattern viewer window
        patternViewerWindow = new PatternViewerWindow();
        // setting the pattern viewer tile with the current tile
        patternViewerWindow.setTile(tile);
        // Set up our frame to recieve drops...        
        dropTarget = new DropTarget(this, this);
        // setting the main window title bar icon
        try {
            this.setIconImage(ImageIO.read(getClass().getResource("/com/deepak/patternextractor/gui/resources/pattern_extractor_icon_16x16.png")));
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tileControlPanel = new javax.swing.JPanel();
        tileWidthSpinner = new javax.swing.JSpinner();
        tileWidthLabel = new javax.swing.JLabel();
        tileHeightLabel = new javax.swing.JLabel();
        tileBorderColorLabel = new javax.swing.JLabel();
        tileHeightSpinner = new javax.swing.JSpinner();
        tileBorderColorSelectionButton = new javax.swing.JButton();
        imageControlPanel = new javax.swing.JPanel();
        imageZoomLabel = new javax.swing.JLabel();
        imageZoomSpinner = new javax.swing.JSpinner();
        imageViewerScrollPane = new javax.swing.JScrollPane();
        imageViewer = new com.deepak.patternextractor.gui.ImageViewer();
        tileViewerScrollPane = new javax.swing.JScrollPane();
        tileViewer = new com.deepak.patternextractor.gui.TileViewer();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openImageMenuItem = new javax.swing.JMenuItem();
        saveTileMenuItem = new javax.swing.JMenuItem();
        savePatternMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        patternWindowMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();
        helpMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pattern Extractor v0.3");

        tileControlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Tile Config"));

        tileWidthSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(16), Integer.valueOf(1), null, Integer.valueOf(1)));
        tileWidthSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tileWidthSpinner_StateChangedEvent(evt);
            }
        });

        tileWidthLabel.setText("Tile Width");

        tileHeightLabel.setText("Tile Height");

        tileBorderColorLabel.setText("Tile Border Color");

        tileHeightSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(16), Integer.valueOf(1), null, Integer.valueOf(1)));
        tileHeightSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tileHeightSpinner_StateChangedEvent(evt);
            }
        });

        tileBorderColorSelectionButton.setText("Color");
        tileBorderColorSelectionButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tileBorderColorSelectionButton_MousePressedEvent(evt);
            }
        });

        javax.swing.GroupLayout tileControlPanelLayout = new javax.swing.GroupLayout(tileControlPanel);
        tileControlPanel.setLayout(tileControlPanelLayout);
        tileControlPanelLayout.setHorizontalGroup(
            tileControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tileControlPanelLayout.createSequentialGroup()
                .addGroup(tileControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tileControlPanelLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(tileControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tileHeightLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tileWidthLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tileControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tileHeightSpinner)
                            .addComponent(tileWidthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(tileControlPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tileBorderColorLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tileBorderColorSelectionButton, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)))
                .addContainerGap())
        );
        tileControlPanelLayout.setVerticalGroup(
            tileControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tileControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tileControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tileWidthLabel)
                    .addComponent(tileWidthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tileControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tileHeightLabel)
                    .addComponent(tileHeightSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tileControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tileBorderColorLabel)
                    .addComponent(tileBorderColorSelectionButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        imageControlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Image Config"));

        imageZoomLabel.setText("Image Zoom");

        imageZoomSpinner.setModel(new javax.swing.SpinnerNumberModel(0, -100, 100, 1));
        imageZoomSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                imageZoomSpinner_StateChangedEvent(evt);
            }
        });

        javax.swing.GroupLayout imageControlPanelLayout = new javax.swing.GroupLayout(imageControlPanel);
        imageControlPanel.setLayout(imageControlPanelLayout);
        imageControlPanelLayout.setHorizontalGroup(
            imageControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imageControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imageZoomLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imageZoomSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                .addContainerGap())
        );
        imageControlPanelLayout.setVerticalGroup(
            imageControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imageControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(imageControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(imageZoomLabel)
                    .addComponent(imageZoomSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        imageViewerScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Image"));

        javax.swing.GroupLayout imageViewerLayout = new javax.swing.GroupLayout(imageViewer);
        imageViewer.setLayout(imageViewerLayout);
        imageViewerLayout.setHorizontalGroup(
            imageViewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 634, Short.MAX_VALUE)
        );
        imageViewerLayout.setVerticalGroup(
            imageViewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 221, Short.MAX_VALUE)
        );

        imageViewerScrollPane.setViewportView(imageViewer);

        tileViewerScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Tile"));

        javax.swing.GroupLayout tileViewerLayout = new javax.swing.GroupLayout(tileViewer);
        tileViewer.setLayout(tileViewerLayout);
        tileViewerLayout.setHorizontalGroup(
            tileViewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 170, Short.MAX_VALUE)
        );
        tileViewerLayout.setVerticalGroup(
            tileViewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 145, Short.MAX_VALUE)
        );

        tileViewerScrollPane.setViewportView(tileViewer);

        fileMenu.setText("File");

        openImageMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.SHIFT_MASK));
        openImageMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/deepak/patternextractor/gui/resources/open.png"))); // NOI18N
        openImageMenuItem.setText("Open Image");
        openImageMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openImageMenuItem_ActionPerformedEvent(evt);
            }
        });
        fileMenu.add(openImageMenuItem);

        saveTileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK));
        saveTileMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/deepak/patternextractor/gui/resources/save_tile.png"))); // NOI18N
        saveTileMenuItem.setText("Save Tile");
        saveTileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTileMenuItem_ActionPerformedEvent(evt);
            }
        });
        fileMenu.add(saveTileMenuItem);

        savePatternMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_MASK));
        savePatternMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/deepak/patternextractor/gui/resources/save_pattern.png"))); // NOI18N
        savePatternMenuItem.setText("Save Pattern");
        savePatternMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePatternMenuItem_ActionPerformedEvent(evt);
            }
        });
        fileMenu.add(savePatternMenuItem);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.SHIFT_MASK));
        exitMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/deepak/patternextractor/gui/resources/exit.png"))); // NOI18N
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItem_ActionPerformedEvent(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        viewMenu.setText("View");

        patternWindowMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.SHIFT_MASK));
        patternWindowMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/deepak/patternextractor/gui/resources/pattern_extractor_icon_16x16.png"))); // NOI18N
        patternWindowMenuItem.setText("Pattern Viewer");
        patternWindowMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patternWindowMenuItem_ActionPerformedEvent(evt);
            }
        });
        viewMenu.add(patternWindowMenuItem);

        menuBar.add(viewMenu);

        helpMenu.setText("Help");

        aboutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.SHIFT_MASK));
        aboutMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/deepak/patternextractor/gui/resources/about.png"))); // NOI18N
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItem_ActionPerformedEvent(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        helpMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.SHIFT_MASK));
        helpMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/deepak/patternextractor/gui/resources/help.png"))); // NOI18N
        helpMenuItem.setText("Help");
        helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuItem_ActionPerformedEvent(evt);
            }
        });
        helpMenu.add(helpMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(imageViewerScrollPane, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(tileControlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(imageControlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(tileViewerScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tileControlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tileViewerScrollPane, 0, 0, Short.MAX_VALUE)
                    .addComponent(imageControlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(imageViewerScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
     *  method called on tile width spinner state changed event.
     *  - value change by spinner or by user keyboard input
     */
    private void tileWidthSpinner_StateChangedEvent(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tileWidthSpinner_StateChangedEvent
        // TODO add your handling code here:
        // set the tile width to the specified value
        tile.setWidth(Integer.parseInt(tileWidthSpinner.getValue().toString()));
    }//GEN-LAST:event_tileWidthSpinner_StateChangedEvent

    /*
     *  method called on tile height spinner state changed event.
     *  - value change by spinner or by user keyboard input
     */
    private void tileHeightSpinner_StateChangedEvent(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tileHeightSpinner_StateChangedEvent
        // TODO add your handling code here:
        // set the tile height to the specified value
        tile.setHeight(Integer.parseInt(tileHeightSpinner.getValue().toString()));
    }//GEN-LAST:event_tileHeightSpinner_StateChangedEvent

    /*
     *  method called on image zoom spinner state changed event.
     *  - value change by spinner or by user keyboard input
     */
    private void imageZoomSpinner_StateChangedEvent(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_imageZoomSpinner_StateChangedEvent
        // TODO add your handling code here:
        // resize the source image to the specified percentage and set the image viewer image
        imageViewer.setImage(ImageResize.resize(sourceImage, Integer.parseInt(imageZoomSpinner.getValue().toString())));
    }//GEN-LAST:event_imageZoomSpinner_StateChangedEvent

    /*
     * method calledon tile border color selection button mouse pressed event
     */
    private void tileBorderColorSelectionButton_MousePressedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tileBorderColorSelectionButton_MousePressedEvent
        // TODO add your handling code here:
        // get the color fom a color chooser
        // set it as the tile border color
        tile.setBorderColor(JColorChooser.showDialog(this, "Select Tile Border Color", Color.red));
        // set the tile border color selection button background color to the selected color
        tileBorderColorSelectionButton.setBackground(tile.getBorderColor());
    }//GEN-LAST:event_tileBorderColorSelectionButton_MousePressedEvent

    /*
     * method called when open image menu item mouse pressed
     */
    private void openImageMenuItem_ActionPerformedEvent(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openImageMenuItem_ActionPerformedEvent
        // create a file chooser
        JFileChooser jfc = new JFileChooser();
        // set the dialog title
        jfc.setDialogTitle("Open Source Image");
        // set the file filter
        jfc.setFileFilter(new ImageFileFilter());
        // if a source image is already selected then start selecting from the same folder itself
        if (sourceImageFile != null) {
            jfc.setCurrentDirectory(sourceImageFile);
        }
        // show the file chooser dialog
        int r = jfc.showOpenDialog(jfc);
        // if file selected
        if (r == JFileChooser.APPROVE_OPTION) {
            try {
                // get the source image file
                sourceImageFile = jfc.getSelectedFile();
                // read the image from the selected file
                sourceImage = ImageIO.read(sourceImageFile);
                // set the image viewer source image
                imageViewer.setImage(sourceImage);
                // reset the image zoom spinner value
                imageZoomSpinner.setValue(0);
            } catch (IOException ex) {
                // if image load failed then notify the user
                JOptionPane.showMessageDialog(rootPane, "Could not load Image\n\nException:" + ex.getLocalizedMessage(), "Image Load Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_openImageMenuItem_ActionPerformedEvent

    /*
     * method called when save tile menu item mouse pressed
     */
    private void saveTileMenuItem_ActionPerformedEvent(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTileMenuItem_ActionPerformedEvent
        // create a file chooser
        JFileChooser jfc = new JFileChooser();
        // set the dialog title
        jfc.setDialogTitle("Save Tile Image");
        // show the file chooser dialog
        int r = jfc.showSaveDialog(jfc);
        // if tile already saved in a folder then start saving from the same folder itself
        if (tileSaveFile != null) {
            jfc.setCurrentDirectory(tileSaveFile);
        }
        // if file selected
        if (r == JFileChooser.APPROVE_OPTION) {
            try {
                // get tile save file
                tileSaveFile = jfc.getSelectedFile();
                // if the save file doesnt have a valid extension, provide one
                if (!tileSaveFile.getName().endsWith(".png")) {
                    tileSaveFile = new File(tileSaveFile.getAbsolutePath() + ".png");
                }
                // save the image on to that file in PNG format
                ImageIO.write(tile.getTileImage(), "PNG", tileSaveFile);
            } catch (IOException ex) {
                // on exception notify user
                JOptionPane.showMessageDialog(rootPane, "Could not save Tile image\n\nException:" + ex.getLocalizedMessage(), "Save Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_saveTileMenuItem_ActionPerformedEvent

    /*
     * method called on save pattern menu item mouse pressed event
     */
    private void savePatternMenuItem_ActionPerformedEvent(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePatternMenuItem_ActionPerformedEvent
        // create a file chooser
        JFileChooser jfc = new JFileChooser();
        // set the dialog title
        jfc.setDialogTitle("Save Pattern Image");
        // if pattern already saved in a folder then start saving from the same folder itself
        if (patternSaveFile != null) {
            jfc.setCurrentDirectory(patternSaveFile);
        }
        // show the file chooser dialog
        int r = jfc.showSaveDialog(jfc);
        // on file selection
        if (r == JFileChooser.APPROVE_OPTION) {
            try {
                // request user to input the pattern image resolution in [width] x [height] format
                String widthXheight = JOptionPane.showInputDialog("Enter [width] x [height]");
                // if user enters '*' insted of 'x' then replace it with 'x'
                widthXheight = widthXheight.replace('*', 'x');
                // trim white spaces
                widthXheight = widthXheight.trim();
                // convert all to lower case
                widthXheight = widthXheight.toLowerCase();
                // validate input
                if (!widthXheight.contains("x")) {
                    throw new NumberFormatException();
                }
                // parse width
                int patternWidth = Integer.parseInt(widthXheight.split("x")[0]);
                // parse height
                int patternHeight = Integer.parseInt(widthXheight.split("x")[1]);
                // get the selected file
                patternSaveFile = jfc.getSelectedFile();
                // if the save file doesnt have a valid extension, provide one
                if (!patternSaveFile.getName().endsWith(".png")) {
                    patternSaveFile = new File(patternSaveFile.getAbsolutePath() + ".png");
                }
                // create the pattern to the user specified resolution and save the pattern
                ImageIO.write(PatternCreator.createPattern(tile, patternWidth, patternHeight), "PNG", patternSaveFile);
            } catch (IOException ex) {
                // on file save exception notify user
                JOptionPane.showMessageDialog(rootPane, "Could not save Pattern image\n\nException:" + ex.getLocalizedMessage(), "Save Error", JOptionPane.ERROR_MESSAGE);
            } catch (NumberFormatException e) {
                // on invalid resolution exception notify user
                JOptionPane.showMessageDialog(rootPane, "Invalid Resolution.\n\nEnter a valid resolution eg: '600x400'", "Resolution Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_savePatternMenuItem_ActionPerformedEvent

    /*
     * method called on exit menu item mouse pressed event
     */
    private void exitMenuItem_ActionPerformedEvent(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItem_ActionPerformedEvent
        // make the main window invisible
        this.setVisible(false);
        // dispose gui resources
        this.dispose();
        // call garbage collector
        System.gc();
        // exit the program
        System.exit(0);
    }//GEN-LAST:event_exitMenuItem_ActionPerformedEvent

    /*
     * method called on pattern window menu item mouse pressed event
     */
    private void patternWindowMenuItem_ActionPerformedEvent(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patternWindowMenuItem_ActionPerformedEvent
        // if the pattern viewer window closed (set as hide on close) then set it visible
        patternViewerWindow.setVisible(true);
    }//GEN-LAST:event_patternWindowMenuItem_ActionPerformedEvent
    /*
     * method called on about menu item mouse pressed event
     */
    private void aboutMenuItem_ActionPerformedEvent(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItem_ActionPerformedEvent
        // show the about infomation to user
        JOptionPane.showMessageDialog(rootPane,
                "Pattern Extractor v0.2\n\na java based pattern extractor\nDeveloped By: Deepak pk\nEmail: deepakpk009@yahoo.in",
                "About",
                JOptionPane.INFORMATION_MESSAGE,
                new javax.swing.ImageIcon(getClass().getResource("/com/deepak/patternextractor/gui/resources/pattern_extractor_icon_32x32.png")));
    }//GEN-LAST:event_aboutMenuItem_ActionPerformedEvent

    /*
     * method called on help menu item mouse pressed event
     */
    private void helpMenuItem_ActionPerformedEvent(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuItem_ActionPerformedEvent
        // show help information
        JOptionPane.showMessageDialog(rootPane, "Please refer the user manual\nprovided in the documentation folder");
    }//GEN-LAST:event_helpMenuItem_ActionPerformedEvent

    /*
     * main method
     */
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JPanel imageControlPanel;
    private com.deepak.patternextractor.gui.ImageViewer imageViewer;
    private javax.swing.JScrollPane imageViewerScrollPane;
    private javax.swing.JLabel imageZoomLabel;
    private javax.swing.JSpinner imageZoomSpinner;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openImageMenuItem;
    private javax.swing.JMenuItem patternWindowMenuItem;
    private javax.swing.JMenuItem savePatternMenuItem;
    private javax.swing.JMenuItem saveTileMenuItem;
    private javax.swing.JLabel tileBorderColorLabel;
    private javax.swing.JButton tileBorderColorSelectionButton;
    private javax.swing.JPanel tileControlPanel;
    private javax.swing.JLabel tileHeightLabel;
    private javax.swing.JSpinner tileHeightSpinner;
    private com.deepak.patternextractor.gui.TileViewer tileViewer;
    private javax.swing.JScrollPane tileViewerScrollPane;
    private javax.swing.JLabel tileWidthLabel;
    private javax.swing.JSpinner tileWidthSpinner;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables

    public void dragEnter(DropTargetDragEvent dtde) {
        // do nothing
    }

    public void dragOver(DropTargetDragEvent dtde) {
        // do nothing
    }

    public void dropActionChanged(DropTargetDragEvent dtde) {
        // do nothing
    }

    public void dragExit(DropTargetEvent dte) {
        // do nothing
    }

    public void drop(DropTargetDropEvent dropEvent) {
        try {
            // get the dropped object and check its type
            Transferable transferable = dropEvent.getTransferable();
            // get the data flavors
            DataFlavor[] flavors = transferable.getTransferDataFlavors();
            // check if the flavor is of file list type
            if (flavors[0].isFlavorJavaFileListType()) {
                // if yes then accept copy drops
                dropEvent.acceptDrop(DnDConstants.ACTION_COPY_OR_MOVE);
                // get the files list
                List list = (List) transferable.getTransferData(flavors[0]);

                // we will be concerning only about the first file so get the first file
                File file = (File) list.get(0);

                // process only if the file is a properties file
                if (new ImageFileFilter().accept(file)) {
                    try {
                        // get the source image file
                        sourceImageFile = file;
                        // read the image from the selected file
                        sourceImage = ImageIO.read(sourceImageFile);
                        // set the image viewer source image
                        imageViewer.setImage(sourceImage);
                        // reset the image zoom spinner value
                        imageZoomSpinner.setValue(0);
                    } catch (IOException ex) {
                        // if image load failed then notify the user
                        JOptionPane.showMessageDialog(rootPane, "Could not load Image\n\nException:" + ex.getLocalizedMessage(), "Image Load Error", JOptionPane.ERROR_MESSAGE);
                    }
                    // notify the drop complete
                    dropEvent.dropComplete(true);
                    // return the call
                    return;
                } else {
                    // notify the user
                    JOptionPane.showMessageDialog(rootPane, "Not a Image File!", "Open Error", JOptionPane.ERROR_MESSAGE);
                    // notify the drop complete
                    dropEvent.dropComplete(true);
                    return;
                }
            }
            // on unsupported drop event just reject the drop and do not notify the user
            dropEvent.rejectDrop();
        } catch (IOException ex) {
            // on read exception notify the user
            JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage(), "Open Error", JOptionPane.ERROR_MESSAGE);
            dropEvent.dropComplete(true);
        } catch (UnsupportedFlavorException ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getLocalizedMessage(), "Open Error", JOptionPane.ERROR_MESSAGE);
            // on unsupported drop event just reject the drop and do not notify the user
            dropEvent.rejectDrop();
        }

    }
}
