/*
This file is part of PatternExtractor v0.3

PatternExtractor is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

PatternExtractor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with PatternExtractor.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * ImageViewer.java
 *
 * Created on Jan 1, 2006, 1:28:22 AM
 */
package com.deepak.patternextractor.gui;

import com.deepak.patternextractor.core.Tile;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

/**
 *
 * @author deepak
 */

/*
 * ImageViewer.java
 *
 * this jpanel class is used for displaying the source image and the tile border
 * in the main window
 */
public class ImageViewer extends javax.swing.JPanel implements PropertyChangeListener {

    // source image
    private BufferedImage image = null;
    // tile refference
    private Tile tile = null;

    /** Creates new form ImageViewer */
    public ImageViewer() {
        initComponents();
    }

    /*
     * setImage method is used to set an image onto the image viewer panel
     */
    public void setImage(BufferedImage image) {
        // set the current image
        this.image = image;
        // extracting the tile image from the method input image and setting it as the tile image
        try {
            tile.setTileImage(image.getSubimage(tile.getX(), tile.getY(), tile.getWidth(), tile.getHeight()));
        } catch (Exception e) {
        }
        // resizing the image viewer panel to the image resolutions
        this.setPreferredSize(new Dimension(image.getWidth(), image.getHeight()));
        // revalidating the image viewer component
        this.revalidate();
        // repaint the component
        this.repaint();
    }

    /*
     * getter method to return the tile
     */
    public Tile getTile() {
        return tile;
    }

    /*
     * setter method to set the tile
     */
    public void setTile(Tile tile) {
        // set the tile reffernce
        this.tile = tile;
        // add current class(ImageViewer) as tile property change listner
        this.tile.addPropertyChangeListener(this);
    }

    /*
     * overidden paint method of the jpanel
     */
    @Override
    public void paint(Graphics g) {
        super.paint(g);
        // if image present
        if (image != null) {
            // draw the image onto the panel
            g.drawImage(image, 0, 0, this);
            // set the border color of the tile
            g.setColor(tile.getBorderColor());
            // draw the tile border on top the image
            g.drawRect(tile.getX(), tile.getY(), tile.getWidth(), tile.getHeight());
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
        setTileImage(evt);
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here:
        setTileImage(evt);
    }//GEN-LAST:event_formMouseDragged
    
    private void setTileImage(java.awt.event.MouseEvent evt){
        tile.setX(evt.getX() - (tile.getWidth() / 2));
        tile.setY(evt.getY() - (tile.getHeight() / 2));
    }
    /*
     * propertyChange method implemented asper PropertyChangeListener interface
     */
    public void propertyChange(PropertyChangeEvent evt) {
        try {
            // on property change event of the tile
            // extract the tile image from the source image and set the tile image
            tile.setTileImage(image.getSubimage(tile.getX(), tile.getY(), tile.getWidth(), tile.getHeight()));
        } catch (Exception e) {
        }
        // repaint the image panel componet
        repaint();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
